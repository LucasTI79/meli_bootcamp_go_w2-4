// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/products": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "Returns all products",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "204": {
                        "description": "No products to retrieve",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "500": {
                        "description": "Could not fetch products",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create new product",
                "parameters": [
                    {
                        "description": "Product to be added",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns created product",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "409": {
                        "description": "` + "`" + `product_code` + "`" + ` is not unique",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "422": {
                        "description": "Missing fields or invalid field types",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not save product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products/:id": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "responses": {
                    "200": {
                        "description": "Returns product",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete product by ID",
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not delete product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Updates existing product",
                "parameters": [
                    {
                        "description": "Fields to update",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns updated product",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "409": {
                        "description": "` + "`" + `product_code` + "`" + ` is not unique",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid field types",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not save product",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sections": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sections"
                ],
                "summary": "Get all sections",
                "responses": {
                    "200": {
                        "description": "Returns all sections",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "204": {
                        "description": "No sections to retrieve",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "500": {
                        "description": "Could not fetch sections",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sections"
                ],
                "summary": "Create new section",
                "parameters": [
                    {
                        "description": "section to be added",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/section.CreateSection"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns created section",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "409": {
                        "description": "` + "`" + `section_number` + "`" + ` is not unique",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "422": {
                        "description": "Missing fields or invalid field types",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not save section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sections/:id": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sections"
                ],
                "summary": "Get section by ID",
                "responses": {
                    "200": {
                        "description": "Returns section",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sections"
                ],
                "summary": "Delete section by ID",
                "responses": {
                    "200": {
                        "description": "Section deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not delete section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sections"
                ],
                "summary": "Updates existing section",
                "parameters": [
                    {
                        "description": "Fields to update",
                        "name": "section",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/section.UpdateSection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns updated section",
                        "schema": {
                            "$ref": "#/definitions/web.response"
                        }
                    },
                    "400": {
                        "description": "Invalid ID type",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Could not find section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "409": {
                        "description": "` + "`" + `section_number` + "`" + ` is not unique",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid field types",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not save section",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/warehouses": {
            "get": {
                "description": "Get all warehouses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "warehouses"
                ],
                "summary": "Retrieve all warehouses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Warehouse"
                            }
                        }
                    },
                    "204": {
                        "description": "warehouses is empty"
                    },
                    "500": {
                        "description": "something went wrong with the request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new warehouse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "warehouses"
                ],
                "summary": "Create a warehouse",
                "parameters": [
                    {
                        "description": "Warehouse object",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Warehouse"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "warehouse can be alreary exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/warehouses/{id}": {
            "get": {
                "description": "Get a warehouse by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "warehouses"
                ],
                "summary": "Retrieve a warehouse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Warehouse not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a warehouse by ID",
                "tags": [
                    "warehouses"
                ],
                "summary": "Delete a warehouse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Warehouse not deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a warehouse by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "warehouses"
                ],
                "summary": "Update a warehouse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated warehouse object",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Warehouse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Warehouse"
                        }
                    },
                    "404": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Warehouse code must be unique",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "action could not be processed correctly due to invalid data provided",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/buyers": {
            "get": {
                "description": "Get all buyers",
                "tags": [
                    "buyers"
                ],
                "summary": "Get all buyers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Buyer"
                            }
                        }
                    },
                    "204": {
                        "description": "No buyers found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Buyer not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new buyer",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "buyers"
                ],
                "summary": "Create a new buyer",
                "parameters": [
                    {
                        "description": "Buyer object",
                        "name": "buyer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BuyerCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Buyer"
                        }
                    },
                    "422": {
                        "description": "Buyer not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/buyers/{id}": {
            "get": {
                "description": "Get a buyer by ID",
                "tags": [
                    "buyers"
                ],
                "summary": "Get a buyer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Buyer"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a buyer by ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "buyers"
                ],
                "summary": "Update a buyer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Buyer object",
                        "name": "buyer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Buyer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Buyer"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Buyer not updated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a buyer by ID",
                "tags": [
                    "buyers"
                ],
                "summary": "Delete a buyer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Buyer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Buyer deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Buyer not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "description": "Retorna uma lista com todas as informações dos funcionários cadastrados",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Obtém todas as informações dos funcionários",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Employee"
                            }
                        }
                    },
                    "400": {
                        "description": "employee not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Cria um novo funcionário com base nos dados fornecidos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Cria um novo funcionário",
                "parameters": [
                    {
                        "description": "Novo funcionário a ser criado",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Employee"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Employee"
                        }
                    },
                    "422": {
                        "description": "employee card ID need to be only",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "employee not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employees/{id}": {
            "get": {
                "description": "Retorna as informações de um funcionário com base no ID fornecido",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Obtém as informações de um funcionário pelo ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do funcionário a ser obtido",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Employee"
                        }
                    },
                    "400": {
                        "description": "invalid card id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove um funcionário com base no ID fornecido",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Remove um funcionário",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do funcionário a ser removido",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "employee not deleted",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Atualiza as informações de um funcionário com base no ID fornecido e nos dados enviados",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Atualiza as informações de um funcionário",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do funcionário a ser atualizado",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados do funcionário a serem atualizados",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Employee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Employee"
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "action could not be processed correctly due to invalid data provided",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sellers": {
            "get": {
                "description": "Retrieves all sellers",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all sellers",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved sellers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Seller"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new seller with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new seller",
                "parameters": [
                    {
                        "description": "Seller object",
                        "name": "seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Seller"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created seller",
                        "schema": {
                            "$ref": "#/definitions/domain.Seller"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/sellers/{id}": {
            "get": {
                "description": "Retrieves a seller based on the provided ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a seller by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller",
                        "schema": {
                            "$ref": "#/definitions/domain.Seller"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing seller with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update an existing seller",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seller object",
                        "name": "seller",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Seller"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated seller",
                        "schema": {
                            "$ref": "#/definitions/domain.Seller"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a seller based on the provided ID",
                "summary": "Delete a seller by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Buyer": {
            "type": "object",
            "required": [
                "first_name",
                "last_name"
            ],
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "domain.BuyerCreate": {
            "type": "object",
            "required": [
                "card_number_id",
                "first_name",
                "last_name"
            ],
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "domain.Employee": {
            "type": "object",
            "properties": {
                "card_number_id": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "domain.Seller": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cid": {
                    "type": "integer"
                },
                "company_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "domain.Warehouse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "integer"
                },
                "telephone": {
                    "type": "string"
                },
                "warehouse_code": {
                    "type": "string"
                }
            }
        },
        "handler.CreateRequest": {
            "type": "object",
            "required": [
                "description",
                "expiration_rate",
                "freezing_rate",
                "height",
                "length",
                "netweight",
                "product_code",
                "product_type_id",
                "recommended_freezing_temperature",
                "width"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "expiration_rate": {
                    "type": "integer"
                },
                "freezing_rate": {
                    "type": "integer"
                },
                "height": {
                    "type": "number"
                },
                "length": {
                    "type": "number"
                },
                "netweight": {
                    "type": "number"
                },
                "product_code": {
                    "type": "string"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "recommended_freezing_temperature": {
                    "type": "number"
                },
                "seller_id": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "handler.UpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "expiration_rate": {
                    "type": "integer"
                },
                "freezing_rate": {
                    "type": "integer"
                },
                "height": {
                    "type": "number"
                },
                "length": {
                    "type": "number"
                },
                "netweight": {
                    "type": "number"
                },
                "product_code": {
                    "type": "string"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "recommended_freezing_temperature": {
                    "type": "number"
                },
                "seller_id": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "section.CreateSection": {
            "type": "object",
            "required": [
                "current_capacity",
                "current_temperature",
                "maximum_capacity",
                "minimum_capacity",
                "minimum_temperature",
                "product_type_id",
                "section_number",
                "warehouse_id"
            ],
            "properties": {
                "current_capacity": {
                    "type": "integer"
                },
                "current_temperature": {
                    "type": "integer"
                },
                "maximum_capacity": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "integer"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "section_number": {
                    "type": "integer"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "section.UpdateSection": {
            "type": "object",
            "properties": {
                "current_capacity": {
                    "type": "integer"
                },
                "current_temperature": {
                    "type": "integer"
                },
                "maximum_capacity": {
                    "type": "integer"
                },
                "minimum_capacity": {
                    "type": "integer"
                },
                "minimum_temperature": {
                    "type": "integer"
                },
                "product_type_id": {
                    "type": "integer"
                },
                "section_number": {
                    "type": "integer"
                },
                "warehouse_id": {
                    "type": "integer"
                }
            }
        },
        "web.errorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "web.response": {
            "type": "object",
            "properties": {
                "data": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
