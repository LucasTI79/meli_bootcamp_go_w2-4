definitions:
  domain.Buyer:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  domain.BuyerCreate:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    required:
    - card_number_id
    - first_name
    - last_name
    type: object
  domain.Employee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  domain.Seller:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      telephone:
        type: string
    type: object
  domain.Warehouse:
    properties:
      address:
        type: string
      id:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
  handler.CreateRequest:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    required:
    - description
    - expiration_rate
    - freezing_rate
    - height
    - length
    - netweight
    - product_code
    - product_type_id
    - recommended_freezing_temperature
    - width
    type: object
  handler.UpdateRequest:
    properties:
      description:
        type: string
      expiration_rate:
        type: integer
      freezing_rate:
        type: integer
      height:
        type: number
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  section.CreateSection:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    required:
    - current_capacity
    - current_temperature
    - maximum_capacity
    - minimum_capacity
    - minimum_temperature
    - product_type_id
    - section_number
    - warehouse_id
    type: object
  section.UpdateSection:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  web.errorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  web.response:
    properties:
      data: {}
    type: object
info:
  contact: {}
paths:
  /api/v1/products:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Returns all products
          schema:
            $ref: '#/definitions/web.response'
        "204":
          description: No products to retrieve
          schema:
            $ref: '#/definitions/web.response'
        "500":
          description: Could not fetch products
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product to be added
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Returns created product
          schema:
            $ref: '#/definitions/web.response'
        "409":
          description: '`product_code` is not unique'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "422":
          description: Missing fields or invalid field types
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not save product
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Create new product
      tags:
      - Products
  /api/v1/products/:id:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find product
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not delete product
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Delete product by ID
      tags:
      - Products
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Returns product
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find product
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      parameters:
      - description: Fields to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns updated product
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find product
          schema:
            $ref: '#/definitions/web.errorResponse'
        "409":
          description: '`product_code` is not unique'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "422":
          description: Invalid field types
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not save product
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Updates existing product
      tags:
      - Products
  /api/v1/sections:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Returns all sections
          schema:
            $ref: '#/definitions/web.response'
        "204":
          description: No sections to retrieve
          schema:
            $ref: '#/definitions/web.response'
        "500":
          description: Could not fetch sections
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get all sections
      tags:
      - Sections
    post:
      consumes:
      - application/json
      parameters:
      - description: section to be added
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/section.CreateSection'
      produces:
      - application/json
      responses:
        "201":
          description: Returns created section
          schema:
            $ref: '#/definitions/web.response'
        "409":
          description: '`section_number` is not unique'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "422":
          description: Missing fields or invalid field types
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not save section
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Create new section
      tags:
      - Sections
  /api/v1/sections/:id:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Section deleted successfully
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find section
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not delete section
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Delete section by ID
      tags:
      - Sections
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Returns section
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find section
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get section by ID
      tags:
      - Sections
    patch:
      consumes:
      - application/json
      parameters:
      - description: Fields to update
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/section.UpdateSection'
      produces:
      - application/json
      responses:
        "200":
          description: Returns updated section
          schema:
            $ref: '#/definitions/web.response'
        "400":
          description: Invalid ID type
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Could not find section
          schema:
            $ref: '#/definitions/web.errorResponse'
        "409":
          description: '`section_number` is not unique'
          schema:
            $ref: '#/definitions/web.errorResponse'
        "422":
          description: Invalid field types
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Could not save section
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Updates existing section
      tags:
      - Sections
  /api/v1/warehouses:
    get:
      description: Get all warehouses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Warehouse'
            type: array
        "204":
          description: warehouses is empty
        "500":
          description: something went wrong with the request
          schema:
            type: string
      summary: Retrieve all warehouses
      tags:
      - warehouses
    post:
      consumes:
      - application/json
      description: Create a new warehouse
      parameters:
      - description: Warehouse object
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/domain.Warehouse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Warehouse'
        "400":
          description: Invalid request
          schema:
            type: string
        "409":
          description: warehouse can be alreary exist
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a warehouse
      tags:
      - warehouses
  /api/v1/warehouses/{id}:
    delete:
      description: Delete a warehouse by ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            type: string
        "405":
          description: Warehouse not deleted
          schema:
            type: string
      summary: Delete a warehouse
      tags:
      - warehouses
    get:
      description: Get a warehouse by ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Warehouse'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Warehouse not found
          schema:
            type: string
      summary: Retrieve a warehouse
      tags:
      - warehouses
    patch:
      consumes:
      - application/json
      description: Update a warehouse by ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated warehouse object
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/domain.Warehouse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Warehouse'
        "404":
          description: Invalid ID
          schema:
            type: string
        "409":
          description: Warehouse code must be unique
          schema:
            type: string
        "422":
          description: action could not be processed correctly due to invalid data
            provided
          schema:
            type: string
      summary: Update a warehouse
      tags:
      - warehouses
  /buyers:
    get:
      description: Get all buyers
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Buyer'
            type: array
        "204":
          description: No buyers found
          schema:
            type: string
        "500":
          description: Buyer not found
          schema:
            type: string
      summary: Get all buyers
      tags:
      - buyers
    post:
      consumes:
      - application/json
      description: Create a new buyer
      parameters:
      - description: Buyer object
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/domain.BuyerCreate'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Buyer'
        "422":
          description: Buyer not created
          schema:
            type: string
      summary: Create a new buyer
      tags:
      - buyers
  /buyers/{id}:
    delete:
      description: Delete a buyer by ID
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Buyer deleted
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Buyer not found
          schema:
            type: string
      summary: Delete a buyer by ID
      tags:
      - buyers
    get:
      description: Get a buyer by ID
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Buyer not found
          schema:
            type: string
      summary: Get a buyer by ID
      tags:
      - buyers
    put:
      consumes:
      - application/json
      description: Update a buyer by ID
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Buyer object
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/domain.Buyer'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Buyer not updated
          schema:
            type: string
      summary: Update a buyer by ID
      tags:
      - buyers
  /employees:
    get:
      consumes:
      - application/json
      description: Retorna uma lista com todas as informações dos funcionários cadastrados
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Employee'
            type: array
        "400":
          description: employee not found
          schema:
            type: string
      summary: Obtém todas as informações dos funcionários
      tags:
      - employees
    post:
      consumes:
      - application/json
      description: Cria um novo funcionário com base nos dados fornecidos
      parameters:
      - description: Novo funcionário a ser criado
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Employee'
        "422":
          description: employee card ID need to be only
          schema:
            type: string
        "500":
          description: employee not created
          schema:
            type: string
      summary: Cria um novo funcionário
      tags:
      - employees
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Remove um funcionário com base no ID fornecido
      parameters:
      - description: ID do funcionário a ser removido
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid id
          schema:
            type: string
        "405":
          description: employee not deleted
          schema:
            type: string
      summary: Remove um funcionário
      tags:
      - employees
    get:
      consumes:
      - application/json
      description: Retorna as informações de um funcionário com base no ID fornecido
      parameters:
      - description: ID do funcionário a ser obtido
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
        "400":
          description: invalid card id
          schema:
            type: string
        "404":
          description: invalid id
          schema:
            type: string
      summary: Obtém as informações de um funcionário pelo ID
      tags:
      - employees
    patch:
      consumes:
      - application/json
      description: Atualiza as informações de um funcionário com base no ID fornecido
        e nos dados enviados
      parameters:
      - description: ID do funcionário a ser atualizado
        in: path
        name: id
        required: true
        type: integer
      - description: Dados do funcionário a serem atualizados
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
        "400":
          description: invalid id
          schema:
            type: string
        "404":
          description: action could not be processed correctly due to invalid data
            provided
          schema:
            type: string
      summary: Atualiza as informações de um funcionário
      tags:
      - employees
  /sellers:
    get:
      description: Retrieves all sellers
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved sellers
          schema:
            items:
              $ref: '#/definitions/domain.Seller'
            type: array
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get all sellers
      tags:
      - Sellers
    post:
      consumes:
      - application/json
      description: Creates a new seller with the provided data
      parameters:
      - description: Seller object
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/domain.Seller'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created seller
          schema:
            $ref: '#/definitions/domain.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.errorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Create a new seller
      tags:
      - Sellers
  /sellers/{id}:
    delete:
      description: Deletes a seller based on the provided ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Delete a seller by ID
      tags:
      - Sellers
    get:
      description: Retrieves a seller based on the provided ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved seller
          schema:
            $ref: '#/definitions/domain.Seller'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Get a seller by ID
      tags:
      - Sellers
    put:
      consumes:
      - application/json
      description: Updates an existing seller with the provided data
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seller object
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/domain.Seller'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated seller
          schema:
            $ref: '#/definitions/domain.Seller'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.errorResponse'
      summary: Update an existing seller
      tags:
      - Sellers
swagger: "2.0"
